openapi: 3.0.3
info:
  title: Bank Cards Admin API
  description: API для управления банковскими картами администратором
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:8080
    description: Локальный сервер разработки
  - url: https://api.example.com
    description: Продакшен сервер

paths:
  /api/v1/admin/card:
    get:
      tags:
        - Admin Card Management
      summary: Получить все карты
      description: Возвращает пагинированный список всех карт
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы (по умолчанию 0)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Размер страницы (по умолчанию 10)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: sortBy
          in: query
          description: Поле для сортировки (по умолчанию id)
          schema:
            type: string
            enum: [id, cardNumber, expiryDate, status, balance]
            default: id
        - name: sortDirection
          in: query
          description: "Направление сортировки: asc или desc (по умолчанию asc)"
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Успешное получение списка карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTOEncrypted'
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Admin Card Management
      summary: Создать карту для пользователя
      description: Создает новую карту для указанного пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: ownerId
          in: query
          description: ID владельца карты
          required: true
          schema:
            type: string

      responses:
        '201':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Admin Card Management
      summary: Удалить карту
      description: Удаляет карту по её ID
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          description: ID карты для удаления
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Карта успешно удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Неверный ID карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/{cardId}:
    get:
      tags:
        - Admin Card Management
      summary: Получить карту по ID
      description: Возвращает карту по её идентификатору
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Неверный ID карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/number/{cardNumber}:
    get:
      tags:
        - Admin Card Management
      summary: Получить карту по номеру
      description: Возвращает карту по её номеру
      security:
        - bearerAuth: []
      parameters:
        - name: cardNumber
          in: path
          description: Номер карты (16 цифр)
          required: true
          schema:
            type: string
            pattern: '^\d{16}$'
            example: "1234567812345678"
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Неверный формат номера карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/user:
    get:
      tags:
        - Admin Card Management
      summary: Получить карты пользователя
      description: Возвращает пагинированный список карт конкретного пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: ownerId
          in: query
          description: ID владельца карты
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Номер страницы (по умолчанию 0)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Размер страницы (по умолчанию 10)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: sortBy
          in: query
          description: Поле для сортировки (по умолчанию id)
          schema:
            type: string
            enum: [id, cardNumber, expiryDate, status, balance]
            default: id
        - name: sortDirection
          in: query
          description: "Направление сортировки: asc или desc (по умолчанию asc)"
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Успешное получение списка карт пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTOEncrypted'
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/activate:
    put:
      tags:
        - Admin Card Management
      summary: Активировать карту
      description: Активирует карту по её ID
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1

      responses:
        '200':
          description: Карта успешно активирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTOEncrypted'
        '400':
          description: Неверный ID карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/block:
    put:
      tags:
        - Admin Card Management
      summary: Заблокировать карту
      description: Блокирует карту по её ID
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Карта успешно заблокирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Неверный ID карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/block-requested:
    put:
      tags:
        - Admin Card Management
      summary: Заблокировать запрошенные карты
      description: Блокирует все карты, помеченные для блокировки
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Все запрошенные карты заблокированы
          content:
            text/plain:
              schema:
                type: string
                example: "All requested cards are blocked"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/expire:
    put:
      tags:
        - Admin Card Management
      summary: Пометить карты как просроченные
      description: Помечает все устаревшие карты как просроченные
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Все устаревшие карты помечены как просроченные
          content:
            text/plain:
              schema:
                type: string
                example: "All outdated cards are marked as expired"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен. Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/user:
    get:
      tags:
        - Admin Users
      summary: Получить список всех пользователей
      description: Возвращает пагинированный список пользователей с возможностью сортировки
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          description: Номер страницы (начинается с 0)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Размер страницы
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: sortBy
          in: query
          description: Поле для сортировки
          required: false
          schema:
            type: string
            default: "id"
            enum: [ id, username, createdAt ]
        - name: sortDirection
          in: query
          description: Направление сортировки
          required: false
          schema:
            type: string
            default: "asc"
            enum: [ asc, desc ]
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Admin Users
      summary: Создать нового пользователя
      description: Создает нового пользователя с указанными учетными данными
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationDTO'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Admin Users
      summary: Удалить пользователя
      description: Удаляет пользователя по идентификатору
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: query
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Пользователь успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/user/{id}:
    get:
      tags:
        - Admin Users
      summary: Получить пользователя по ID
      description: Возвращает информацию о пользователе по его идентификатору
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/card/balance:
    get:
      summary: Получить баланс карты
      description: Возвращает баланс указанной карты пользователя
      operationId: getCardBalance
      tags:
        - User Card Management
      parameters:
        - name: Authorization
          in: header
          description: Bearer токен авторизации
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: cardId
          in: query
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
            example: 12345
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: number
                format: decimal
                example: 1500.75
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/card:
    get:
      summary: Получить список карт пользователя
      description: Возвращает пагинированный список банковских карт текущего пользователя
      operationId: getUsersCards
      tags:
        - User Card Management
      parameters:
        - name: page
          in: query
          description: Номер страницы (начинается с 0)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Размер страницы
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: sortBy
          in: query
          description: Поле для сортировки
          required: false
          schema:
            type: string
            default: "id"
        - name: sortDirection
          in: query
          description: Направление сортировки
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: "asc"
        - name: Authorization
          in: header
          description: Bearer токен авторизации
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardDTO'
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Создать новую карту
      description: Создает новую банковскую карту для текущего пользователя
      operationId: createCard
      tags:
        - User Card Management
      parameters:
        - name: Authorization
          in: header
          description: Bearer токен авторизации
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/card/block:
    put:
      summary: Запрос на блокировку карты
      description: Отправляет запрос на блокировку карты администратору
      operationId: blockCardRequest
      tags:
        - User Card Management
      parameters:
        - name: Authorization
          in: header
          description: Bearer токен авторизации
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: cardId
          in: query
          description: ID карты для блокировки
          required: true
          schema:
            type: integer
            format: int64
            example: 12345
      responses:
        '200':
          description: Запрос на блокировку отправлен
          content:
            text/plain:
              schema:
                type: string
                example: "Block request from user-id:123 has been sent to admin.\n Card to block: 12345"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/token:
    post:
      summary: Получить токен авторизации
      description: Возвращает JWT токен для авторизации пользователя
      operationId: getToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationDTO'
      responses:
        '200':
          description: Успешная авторизация
          content:
            text/plain:
              schema:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Неверные учетные данные
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/card/deposit:
    put:
      summary: Пополнить карту
      description: Пополняет баланс указанной карты
      operationId: deposit
      tags:
        - User Card Management
      parameters:
        - name: amount
          in: query
          description: Сумма для пополнения
          required: true
          schema:
            type: number
            format: decimal
            minimum: 0.01
            example: 1000.00
        - name: cardId
          in: query
          description: ID карты для пополнения
          required: true
          schema:
            type: integer
            format: int64
            example: 12345
      responses:
        '200':
          description: Средства успешно зачислены
          content:
            text/plain:
              schema:
                type: string
                example: "Funds have been deposited: +1000.00"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/card/withdraw:
    put:
      summary: Снять средства с карты
      description: Снимает средства с указанной карты
      operationId: withdraw
      tags:
        - User Card Management
      parameters:
        - name: amount
          in: query
          description: Сумма для снятия
          required: true
          schema:
            type: number
            format: decimal
            minimum: 0.01
            example: 500.00
        - name: cardId
          in: query
          description: ID карты для снятия
          required: true
          schema:
            type: integer
            format: int64
            example: 12345
      responses:
        '200':
          description: Средства успешно сняты
          content:
            text/plain:
              schema:
                type: string
                example: "Funds have been withdrawn: -500.00"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/card/transfer:
    put:
      summary: Перевод между картами
      description: Переводит средства с одной карты на другую
      operationId: transfer
      tags:
        - User Card Management
      parameters:
        - name: fromId
          in: query
          description: ID карты отправителя
          required: true
          schema:
            type: integer
            format: int64
            example: 12345
        - name: toId
          in: query
          description: ID карты получателя
          required: true
          schema:
            type: integer
            format: int64
            example: 67890
        - name: amount
          in: query
          description: Сумма перевода
          required: true
          schema:
            type: number
            format: decimal
            minimum: 0.01
            example: 300.00
      responses:
        '200':
          description: Перевод выполнен успешно
          content:
            text/plain:
              schema:
                type: string
                example: "Funds have been transferred\nCard-id:12345 -300.00\nCard-id:67890 +300.00"
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    CardDTO:
      type: object
      required:
        - id
        - cardNumber
        - ownerId
        - expiryDate
        - status
        - balance
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор карты
          example: 12345
        cardNumber:
          type: string
          description: Номер карты (16 цифр)
          pattern: '^\d{16}$'
          example: "1234567812345678"
        ownerId:
          type: string
          format: uuid
          description: ID владельца карты
          example: "123e4567-e89b-12d3-a456-426614174000"
        expiryDate:
          type: string
          format: year-month
          description: Дата окончания действия в формате ГГГГ-ММ
          pattern: '^\d{4}-\d{2}$'
          example: "2025-12"
        status:
          $ref: '#/components/schemas/CardStatus'
        balance:
          type: number
          format: bigdecimal
          description: Баланс карты
          minimum: 0
          example: 1500.75

    CardDTOEncrypted:
      type: object
      required:
        - id
        - cardNumber
        - ownerId
        - expiryDate
        - status
        - balance
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор карты
          example: 12345
        cardNumber:
          type: string
          description: Номер карты (16 цифр)
          pattern: '^\d{16}$'
          example: "**** **** **** 5678"
        ownerId:
          type: string
          format: uuid
          description: ID владельца карты
          example: "123e4567-e89b-12d3-a456-426614174000"
        expiryDate:
          type: string
          format: year-month
          description: Дата окончания действия в формате ГГГГ-ММ
          pattern: '^\d{4}-\d{2}$'
          example: "2025-12"
        status:
          $ref: '#/components/schemas/CardStatus'
        balance:
          type: number
          format: bigdecimal
          description: Баланс карты
          minimum: 0
          example: 1500.75

    CardStatus:
      type: string
      enum:
        - ACTIVE
        - BLOCKED
        - EXPIRED
      description: Статусы карты
      example: "ACTIVE"

    UserPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        totalElements:
          type: integer
          description: Общее количество элементов
        totalPages:
          type: integer
          description: Общее количество страниц
        size:
          type: integer
          description: Размер страницы
        number:
          type: integer
          description: Номер текущей страницы
        first:
          type: boolean
          description: Является ли первая страница
        last:
          type: boolean
          description: Является ли последняя страница
        empty:
          type: boolean
          description: Пустая ли страница

    UserCreationDTO:
      type: object
      properties:
        username:
          type: string
          description: Имя пользователя
          minLength: 3
          maxLength: 50
        password:
          type: string
          description: Пароль пользователя
          minLength: 6
          maxLength: 100
          format: password
      required:
        - username
        - password

    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя
        username:
          type: string
          description: Имя пользователя
        roles:
          type: array
          items:
            enum: [ USER, ADMIN ]
      required:
        - id
        - username
        - roles

    PageCardDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDTO'
          description: Список карт на текущей странице
        totalElements:
          type: integer
          description: Общее количество элементов
          example: 150
        totalPages:
          type: integer
          description: Общее количество страниц
          example: 15
        size:
          type: integer
          description: Размер страницы
          example: 10
        number:
          type: integer
          description: Номер текущей страницы (начиная с 0)
          example: 0
        first:
          type: boolean
          description: Является ли текущая страница первой
          example: true
        last:
          type: boolean
          description: Является ли текущая страница последней
          example: false
        numberOfElements:
          type: integer
          description: Количество элементов на текущей странице
          example: 10
        empty:
          type: boolean
          description: Пуста ли страница
          example: false

    PageCardDTOEncrypted:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDTOEncrypted'
          description: Список карт на текущей странице
        totalElements:
          type: integer
          description: Общее количество элементов
          example: 150
        totalPages:
          type: integer
          description: Общее количество страниц
          example: 15
        size:
          type: integer
          description: Размер страницы
          example: 10
        number:
          type: integer
          description: Номер текущей страницы (начиная с 0)
          example: 0
        first:
          type: boolean
          description: Является ли текущая страница первой
          example: true
        last:
          type: boolean
          description: Является ли текущая страница последней
          example: false
        numberOfElements:
          type: integer
          description: Количество элементов на текущей странице
          example: 10
        empty:
          type: boolean
          description: Пуста ли страница
          example: false

    Error:
      type: object
      required:
        - status
        - error
        - message
      properties:
        timestamp:
          type: string
          format: date-time
          description: Время возникновения ошибки
          example: "2024-01-15T10:30:00Z"
        status:
          type: integer
          description: HTTP статус код
        error:
          type: string
          description: Тип ошибки
        message:
          type: string
          description: Сообщение об ошибке

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен аутентификации в формате Bearer token

  responses:
    Unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


tags:
  - name: Admin Card Management
    description: API для управления банковскими картами администратором

security:
  - bearerAuth: []