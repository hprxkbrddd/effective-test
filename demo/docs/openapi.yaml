openapi: 3.0.3
info:
  title: Bank Cards Admin API
  description: API для управления банковскими картами администратором
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Локальный сервер
  - url: https://api.example.com
    description: Продакшен сервер

paths:
  /api/v1/admin/card:
    get:
      tags:
        - Admin Card Management
      summary: Получить все карты
      description: Возвращает пагинированный список всех карт
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы (по умолчанию 0)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы (по умолчанию 10)
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Поле для сортировки (по умолчанию id)
          schema:
            type: string
            default: id
        - name: sortDirection
          in: query
          description: "Направление сортировки: asc или desc (по умолчанию asc)"
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение списка карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTO'
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Admin Card Management
      summary: Создать карту для пользователя
      description: Создает новую карту для указанного пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: ownerId
          in: query
          description: ID владельца карты
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Admin Card Management
      summary: Удалить карту
      description: Удаляет карту по её ID
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          description: ID карты для удаления
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карта успешно удалена
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/{cardId}:
    get:
      tags:
        - Admin Card Management
      summary: Получить карту по ID
      description: Возвращает карту по её идентификатору
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/number/{cardNumber}:
    get:
      tags:
        - Admin Card Management
      summary: Получить карту по номеру
      description: Возвращает карту по её номеру
      security:
        - bearerAuth: []
      parameters:
        - name: cardNumber
          in: path
          description: Номер карты
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/user:
    get:
      tags:
        - Admin Card Management
      summary: Получить карты пользователя
      description: Возвращает пагинированный список карт конкретного пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы (по умолчанию 0)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы (по умолчанию 10)
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Поле для сортировки (по умолчанию id)
          schema:
            type: string
            default: id
        - name: sortDirection
          in: query
          description: "Направление сортировки: asc или desc (по умолчанию asc)"
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: ownerId
          in: query
          description: ID владельца карты
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение списка карт пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTO'
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/activate:
    put:
      tags:
        - Admin Card Management
      summary: Активировать карту
      description: Активирует карту по её ID
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          description: ID карты для активации
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карта успешно активирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/block:
    put:
      tags:
        - Admin Card Management
      summary: Заблокировать карту
      description: Блокирует карту по её ID
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          description: ID карты для блокировки
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карта успешно заблокирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/block-requested:
    put:
      tags:
        - Admin Card Management
      summary: Заблокировать запрошенные карты
      description: Блокирует все карты, помеченные для блокировки
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Все запрошенные карты заблокированы
          content:
            application/json:
              schema:
                type: string
                example: "All requested card are blocked"
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/admin/card/expire:
    put:
      tags:
        - Admin Card Management
      summary: Пометить карты как просроченные
      description: Помечает все устаревшие карты как просроченные
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: JWT токен в формате Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Все устаревшие карты помечены как просроченные
          content:
            application/json:
              schema:
                type: string
                example: "All outdated cards are marked as expired"
        '403':
          description: Требуется роль 'ADMIN'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    CardDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID карты
        cardNumber:
          type: string
          description: Номер карты
        ownerId:
          type: string
          description: ID владельца карты
        expiryDate:
          type: string
          format: year-month
          description: Дата окончания действия в формате ГГГГ-ММ
        status:
          $ref: '#/components/schemas/CardStatus'
        balance:
          type: number
          format: bigdecimal
          description: Баланс карты

    UserDTO:
      type: object
      properties:
        id:
          type: string
          description: ID пользователя
        username:
          type: string
          description: Имя пользователя
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          description: Роли пользователя

    Role:
      type: string
      enum:
        - ROLE_USER
        - ROLE_ADMIN
      description: Роли пользователя

    CardStatus:
      type: string
      enum:
        - ACTIVE
        - BLOCKED
        - EXPIRED
      description: Статусы карты
      example: "ACTIVE"

    PageCardDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDTO'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        last:
          type: boolean

    Error:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен аутентификации

tags:
  - name: Admin Card Management
    description: API для управления банковскими картами администратором